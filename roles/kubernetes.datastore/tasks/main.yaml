---
# TODO:
# - [ ] Create Cluster Discovery workflow
- name: Check for etcd binary
  stat:
    path: "{{ etcd_bin_path }}/etcd"
  register: etcd_present

- name: Download and Extract etcd binaries
  unarchive:
    src: "{{ etcd_download_url }}"
    dest: "/tmp"
    remote_src: true

- name: Copy etcd binaries to /usr/bin
  copy:
    src: "/tmp/etcd-v{{ etcd_version }}-linux-{{ arch }}/{{ item }}"
    dest: "/usr/bin/"
    owner: root
    group: root
    mode: "0755"
    remote_src: yes
  loop:
    - "etcd"
    - "etcdctl"
    - "etcdutl"

- name: Create etcd user
  user:
    name: "{{ etcd_user }}"
    state: present
    shell: "/sbin/nologin"
    comment: "ETCD nologin user"
  become: true

- name: Create etcd data dir
  file:
    path: "{{ etcd_config.data_dir }}"
    owner: "{{ etcd_user }}"
    group: "{{ etcd_group }}"
    state: directory

- name: Clean up /tmp
  file:
    state: absent
    path: "/tmp/etcd-v{{ etcd_version }}-linux-{{ arch }}/"

- include_tasks: ssl_certs.yaml
  when:
    - etcd_config.ssl.enabled
    - etcd_config.ssl.peer_transport_security.auto_tls == false
    - etcd_config.ssl.client_transport_security.auto_tls == false

- name: Create etcd config dir
  file:
    path: "{{ etcd_config.config_dir }}"
    owner: "{{ etcd_user }}"
    group: "{{ etcd_group }}"
    state: directory

- name: Copying etcd config
  template:
    src: "../templates/etcd.conf.yml.j2"
    dest: "{{ etcd_config.config_dir }}/etcd.conf.yml"
    owner: "{{ etcd_user }}"
    group: "{{ etcd_group }}"
    mode: "0660"

- name: Create Service File
  template:
    src: "../templates/etcd.service.j2"
    dest: "{{ etcd_system_service }}"
    owner: root
    group: root
    mode: "0644"

- name: Start etcd
  systemd:
    enabled: true
    state: started
    name: etcd

- name: Wait for etcd service to start
  wait_for:
    host: "localhost"
    port: "{{ etcd_config.client_port }}"
    delay: 5
    timeout: 30
    state: started
    msg: "Waiting for etcd service"

- name: Check etcd health
  shell: "{{ etcd_health_check_command }}"
  args:
    executable: /bin/bash
  register: etcd_health_output

- name: etcd health check passed
  assert:
    that:
      - etcd_health_output.rc == 0
    fail_msg: "etcd health check failed!"
    success_msg: "etcd health check passed!"

---
- name: Check for existing Calico DaemonSet
  shell: "kubectl --kubeconfig {{ kube_user_config }} get daemonset -A | grep -ic calico-node"
  become: no
  failed_when: "calico_ds_count == 2"
  register: calico_ds_count
  changed_when: false

- name: Check for Calico version
  shell: "kubectl --kubeconfig {{ kube_user_config }} get ds -n calico-system calico-node -o yaml | grep -m 1 'image:' | sed -nr 's/.+v([0-9.]+)/\\1/p'"
  become: no
  register: calico_version_found
  changed_when: false
  when: "( calico_ds_count.stdout|int > 0 )"

- debug:
    msg:
      - "{% if calico_ds_count.stdout|int > 0 %}Calico Version Found {{ calico_version_found.stdout }}{% else %}No Calico version found{% endif %}"
      - "Calico Version to be installed {{ calico_version }}"

- name: Download Calico Operator {{ calico_version }} yaml
  get_url:
    url: "{{ calico_operator_url }}"
    dest: "{{ calico_operator_destination }}"
  when: (( calico_ds_count.stdout|int == 0 ) or 
    (calico_version_found.stdout is version(calico_version, '<')))

# note replace command might fail sometimes due to resource not yet existing, so create needs to be ran before replace
- name: Create/Replace Calico Operator
  shell: "kubectl --kubeconfig {{ kube_user_config }} {% if calico_ds_count.stdout|int == 0 %}create{% else %}replace{% endif %} -f {{ calico_operator_destination }}"
  become: no
  register: calico_operator_upgrade
  when: (( calico_ds_count.stdout|int == 0 ) or
    (calico_version_found.stdout is version(calico_version, '<')))

- name: Copy calico-custom-resources.yaml
  template:
    src: "../templates/calico-custom-resources.yaml.j2"
    dest: "{{ calico_custom_resources }}"
  when: "( calico_ds_count.stdout|int == 0 )"

- name: Applying calico-custom-resources.yaml
  shell: "kubectl --kubeconfig {{ kube_user_config }} apply -f {{ calico_custom_resources }}"
  become: no
  register: calico_operator_apply
  when: "( calico_ds_count.stdout|int == 0 )"